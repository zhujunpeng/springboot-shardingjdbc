server:
  port: 8888

spring:
  application:
    name: test-server
mybatis:
  type-aliases-package: com.zjp.bean
  mapper-locations: classpath:mybatis/*.xml
  # 控制台打印sql
  configuration:
      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count=countSql
# 通用mapper配置
mapper:
  mappers: com.zjp.utils.MyMapper
  identity: MYSQL
  not-empty: false

# 分库分表配置
sharding:
  jdbc:
    datasource:
      ds0:
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=true&useSSL=true&?useAffectedRows=true&allowMultiQueries=true
        username: root
      ds1:
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=utf8&useSSL=true&useSSL=true&?useAffectedRows=true&allowMultiQueries=true
        username: root
      names: ds0,ds1
    config:
      sharding:
        # 定义哪些表需要分库分表  有多个的话用，分割
        binding-tables: t_user
        tables:
          t_user:
            # 分表策略
            table-strategy:
              # 行表达式策略
              inline:
                # 使用哪个字段进行分表
                sharding-column: age
                # 分表规则
                algorithm-expression: t_user$->{age % 2}
            # 自增列名称，缺省表示不使用自增主键生成器
            key-generator-column-name: user_id
            # 实际选择的数据库以及对应的表
            actual-data-nodes: ds$->{0..1}.t_user$->{0..1}
        # 数据库分库策略
        default-database-strategy:
          inline:
            # 以userId进行分表
            sharding-column: user_id
            algorithm-expression: ds$->{user_id % 2}
        broadcast-tables: t_config